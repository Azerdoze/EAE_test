{"version":3,"file":"dialog-box-button.js","sourceRoot":"","sources":["../src/dialog-box-button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAC,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAG5D,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,UAAU;IAA/C;;QAqBI,wDAAwD;QAExD,eAAU,GAAG,IAAI,CAAC;QAElB,8DAA8D;QAE9D,YAAO,GAAG,MAAM,CAAC;QAGjB,SAAI,GAAC,QAAQ,CAAC;IAyClB,CAAC;IAvCG,4CAA4C;IAC5C,cAAc;QACV,OAAO,IAAI,CAAA;8BACW,IAAI,CAAC,kBAAkB;kBACnC,IAAI,CAAC,OAAO;;SAErB,CAAA;IACL,CAAC;IAED,iCAAiC;IACjC,aAAa;QACT,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;QACnC,IAAG,IAAI,CAAC,UAAU,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACzB;aAAM;YACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SAC1B;IACL,CAAC;IAED,4DAA4D;IAC5D,kBAAkB;QACd,IAAG,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;SACpB;QACD,IAAG,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;YAC1B,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACtC;QACD,IAAG,IAAI,CAAC,OAAO,KAAK,MAAM,IAAI,OAAO,EAAE;YACpC,IAAI,CAAC,aAAa,EAAE,CAAC;SACvB;IACL,CAAC;IAED,0BAA0B;IACjB,MAAM;QACX,OAAO,IAAI,CAAA;cACL,IAAI,CAAC,cAAc,EAAE;cACrB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAA,eAAe,CAAC,CAAC,CAAC,IAAI,CAAA,EAAE;SACpD,CAAC;IACN,CAAC;CACJ,CAAA;AArEG,kCAAkC;AAClB,sBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;KAgB1B,CAAA;AAIF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAC,OAAO,EAAC,CAAC;mDACP;AAIlB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC;gDACjB;AAGjB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,MAAM,EAAC,CAAC;6CAChB;AA9BL,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CAuE3B;SAvEY,eAAe","sourcesContent":["import { LitElement,css, html } from 'lit';\r\nimport { customElement, property } from 'lit/decorators.js';\r\n\r\n@customElement('dialog-box-button')\r\nexport class DialogBoxButton extends LitElement{\r\n\r\n    // Stylization of button component\r\n    static override styles = css`\r\n        button {\r\n            color: black;\r\n            background-color: lightgray;\r\n            padding: 0.5rem 2rem;\r\n            font-family: sans-serif;\r\n            font-weight: bold;\r\n            text-transform: uppercase;\r\n            border: 1px solid darkgray;\r\n            border-radius: 15px;\r\n            cursor: pointer;\r\n        }\r\n        button:hover {\r\n                background-color: darkgreen;\r\n                color: lightgray;\r\n            }\r\n    `;\r\n\r\n    // Boolean regarding if the dialog box should be visible\r\n    @property({type:Boolean}) \r\n    openWindow = true;\r\n    \r\n    // Customization for the name on the button; \"open\" is default\r\n    @property({attribute: 'btn-name'})\r\n    btnName = \"open\";\r\n\r\n    @property({attribute: 'type'})\r\n    type=\"button\";\r\n\r\n    // button template to be added to the render\r\n    buttonTemplate() {\r\n        return html`\r\n            <button @click=\"${this._buttonNameHandler}\">\r\n                ${this.btnName}\r\n            </button>\r\n        `\r\n    }\r\n\r\n    // toggle to hide/show dialog box\r\n    _clickHandler() {\r\n        this.openWindow = !this.openWindow;\r\n        if(this.openWindow) {\r\n            this.btnName = \"open\";\r\n        } else {\r\n            this.btnName = \"close\";\r\n        }\r\n    }\r\n    \r\n    // handler to deal with the different button functionalities\r\n    _buttonNameHandler() {\r\n        if(this.btnName === \"confirm\") {\r\n            console.log(this)\r\n        }\r\n        if(this.btnName === \"cancel\") {\r\n            this.openWindow = !this.openWindow;\r\n        }\r\n        if(this.btnName === \"open\" || \"close\") {\r\n           this._clickHandler();\r\n        }\r\n    }\r\n\r\n    // render to print to HTML\r\n    override render() {\r\n        return html`\r\n            ${this.buttonTemplate()}\r\n            ${!this.openWindow ? html`<slot></slot>` : html``}\r\n        `;\r\n    }\r\n}"]}
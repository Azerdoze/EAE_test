{"version":3,"file":"dialog-box-button.js","sourceRoot":"","sources":["../src/dialog-box-button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AACvD,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;AAGjE,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,UAAU;IAA/C;;QAoBE,wDAAwD;QAExD,cAAS,GAAG,IAAI,CAAC;QAEjB,8CAA8C;QAC9C,gBAAW,GAAG,KAAK,CAAC;QAEpB,8DAA8D;QAE9D,YAAO,GAAG,MAAM,CAAC;IAwCnB,CAAC;IAtCC,4CAA4C;IAC5C,eAAe;QACb,OAAO,IAAI,CAAA;;kBAEG,IAAI,CAAC,UAAU;gBACjB,IAAI,CAAC,OAAO;cACd,IAAI,CAAC,OAAO;;UAEhB,IAAI,CAAC,OAAO;;KAEjB,CAAC;IACJ,CAAC;IAED,UAAU;QACR,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,EAAE;YAC3B,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,EAAE,CAAC;YAClB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;aACI,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;YAC/B,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACzB;aACI,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE;YAChC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,EAAE,CAAC;YACrB,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC;SAEjC;aACI,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YACjC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,EAAE,CAAC;YACtB,YAAY,CAAC,OAAO,GAAG,MAAM,CAAC;SACjC;IACD,CAAC;IAEH,gBAAgB;IACP,MAAM;QACb,OAAO,IAAI,CAAA,IAAI,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC;IAC3C,CAAC;CACF,CAAA;AApEC,kCAAkC;AAClB,sBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;GAgB1B,CAAA;AAIF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;kDACT;AAOjB;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC;gDACjB;AA7BN,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CAqE3B;SArEY,eAAe","sourcesContent":["import {LitElement, css, html} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\n\r\nconst dialogBox = document.querySelector('dialog-box');\r\nconst dialogBoxBtn = document.querySelector('dialog-box-button');\r\n\r\n@customElement('dialog-box-button')\r\nexport class DialogBoxButton extends LitElement {\r\n  // Stylization of button component\r\n  static override styles = css`\r\n    button {\r\n      color: black;\r\n      background-color: lightgray;\r\n      padding: 0.5rem 2rem;\r\n      font-family: sans-serif;\r\n      font-weight: bold;\r\n      text-transform: uppercase;\r\n      border: 1px solid darkgray;\r\n      border-radius: 15px;\r\n      cursor: pointer;\r\n    }\r\n    button:hover {\r\n      background-color: darkgreen;\r\n      color: lightgray;\r\n    }\r\n  `;\r\n\r\n  // Boolean regarding if the dialog box should be visible\r\n  @property({type: Boolean})\r\n  boxHidden = true;\r\n\r\n  // confirming if submission is being triggered\r\n  isSubmitted = false;\r\n\r\n  // Customization for the name on the button; \"open\" is default\r\n  @property({attribute: 'btn-name'})\r\n  btnName = 'open';\r\n\r\n  // button template to be added to the render\r\n  _buttonTemplate() {\r\n    return html`\r\n      <button\r\n        @click=\"${this.buttonCall}\"\r\n        name=\"${this.btnName}\"\r\n        id=\"${this.btnName}\"\r\n      >\r\n        ${this.btnName}\r\n      </button>\r\n    `;\r\n  }\r\n\r\n  buttonCall() {\r\n    if (this.btnName === \"open\") {\r\n      dialogBox?.open();\r\n      console.log(this.btnName)\r\n      this.btnName = \"close\";\r\n    }\r\n    else if (this.btnName === \"close\") {\r\n        dialogBox?.close();\r\n        this.btnName = \"open\";\r\n    }\r\n    else if (this.btnName === \"cancel\") {\r\n        dialogBox?._cancel();\r\n        dialogBoxBtn.btnName = \"open\";\r\n        \r\n    }\r\n    else if (this.btnName === \"confirm\") {\r\n        dialogBox?._confirm();\r\n        dialogBoxBtn.btnName = \"open\";\r\n    }\r\n    }\r\n\r\n  // print to HTML\r\n  override render() {\r\n    return html` ${this._buttonTemplate()} `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'dialog-box-button': DialogBoxButton;\r\n  }\r\n}\r\n"]}